//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Domstol.Hendelser.ApiClient
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DaEventFeedClient 
    {
        private string _baseUrl = "https://hendelsesliste.test.domstol.no/api";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public DaEventFeedClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Get a list of patches represented as lists of cloud events
        /// </summary>
        /// <param name="from">Use to set paging start position</param>
        /// <param name="limit">Use to set paging size</param>
        /// <returns>List of consumable events</returns>
        /// <exception cref="DaHendelserApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<DaEvent>>> HendelseslisteAsync(System.DateTimeOffset? from, int? limit)
        {
            return HendelseslisteAsync(from, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of patches represented as lists of cloud events
        /// </summary>
        /// <param name="from">Use to set paging start position</param>
        /// <param name="limit">Use to set paging size</param>
        /// <returns>List of consumable events</returns>
        /// <exception cref="DaHendelserApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<DaEvent>>> HendelseslisteAsync(System.DateTimeOffset? from, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hendelsesliste?");
            if (from != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from") + "=").Append(System.Uri.EscapeDataString(from.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<DaEvent>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DaHendelserApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new DaHendelserApiException("Missing authorization token for Maskinporten", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new DaHendelserApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get latest object state given its UUID
        /// </summary>
        /// <param name="uuid">Use to set paging start position</param>
        /// <returns>Object state, adapted for consuming service</returns>
        /// <exception cref="DaHendelserApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Sak> ObjectsAsync(System.Guid uuid)
        {
            return ObjectsAsync(uuid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get latest object state given its UUID
        /// </summary>
        /// <param name="uuid">Use to set paging start position</param>
        /// <returns>Object state, adapted for consuming service</returns>
        /// <exception cref="DaHendelserApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Sak> ObjectsAsync(System.Guid uuid, System.Threading.CancellationToken cancellationToken)
        {
            if (uuid == null)
                throw new System.ArgumentNullException("uuid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/objects/{uuid}");
            urlBuilder_.Replace("{uuid}", System.Uri.EscapeDataString(ConvertToString(uuid, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Sak>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DaHendelserApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new DaHendelserApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new DaHendelserApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new DaHendelserApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Part
    {
        /// <summary>
        /// National identification number (F-/D-/FH-/H-/FST-nummer)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(11, MinimumLength = 11)]
        public string Nin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("role")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PartRole Role { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("formuesfullmakt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PartFormuesfullmakt Formuesfullmakt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("signertDato")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string SignertDato { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("onsketSkifteForm")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string OnsketSkifteForm { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paatarGjeldsansvar")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PaatarGjeldsansvar { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("godkjennerSkifteAttest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool GodkjennerSkifteAttest { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Sak
    {

        [System.Text.Json.Serialization.JsonPropertyName("sakId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid SakId { get; set; }

        /// <summary>
        /// National identification number (F-/D-/FH-/H-/FST-nummer)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("avdoede")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(11, MinimumLength = 11)]
        public string Avdoede { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("embeteId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SakEmbeteId EmbeteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parter")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Part> Parter { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("receivedDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset ReceivedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("skifteform")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SakSkifteform Skifteform { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// CloudEvents Specification JSON Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DaEvent
    {
        /// <summary>
        /// Identifies the event.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Id { get; set; }

        /// <summary>
        /// Identifies the context in which an event happened.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Source { get; set; }

        /// <summary>
        /// The version of the CloudEvents specification which the event uses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("specversion")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Specversion { get; set; }

        /// <summary>
        /// Describes the type of event related to the originating occurrence.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Type { get; set; }

        /// <summary>
        /// Content type of the data value. Must adhere to RFC 2046 format.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("datacontenttype")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Datacontenttype { get; set; }

        /// <summary>
        /// Identifies the schema that data adheres to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dataschema")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public System.Uri Dataschema { get; set; }

        /// <summary>
        /// Describes the subject of the event in the context of the event producer (identified by source).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subject")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Subject { get; set; }

        /// <summary>
        /// Timestamp of when the occurrence happened. Must adhere to RFC 3339.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("time")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public System.DateTimeOffset? Time { get; set; }

        /// <summary>
        /// The event payload.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public dynamic Data { get; set; }

        /// <summary>
        /// Base64 encoded event payload. Must adhere to RFC4648.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("data_base64")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Data_base64 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum PartRole
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PART_ANNEN,")]
        PART_ANNEN_ = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GJENLEV_EKTEFELLE_PARTNER")]
        GJENLEV_EKTEFELLE_PARTNER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GJENLEV_PARTNER")]
        GJENLEV_PARTNER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GJENLEV_SAMBOER")]
        GJENLEV_SAMBOER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"BARN")]
        BARN = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"BARNEBARN")]
        BARNEBARN = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SAERKULLSBARN")]
        SAERKULLSBARN = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SAERKULLSBARN_BARN")]
        SAERKULLSBARN_BARN = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FAR")]
        FAR = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MOR")]
        MOR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"SOESKEN")]
        SOESKEN = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SOESKENS_BARN")]
        SOESKENS_BARN = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"SOESKENS_BARNEBARN")]
        SOESKENS_BARNEBARN = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"HALV_SOESKEN")]
        HALV_SOESKEN = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"HALV_SOESKENS_BARN")]
        HALV_SOESKENS_BARN = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"FARFAR")]
        FARFAR = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FARMOR")]
        FARMOR = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"MORFAR")]
        MORFAR = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"MORMOR")]
        MORMOR = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"ONKEL")]
        ONKEL = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"TANTE")]
        TANTE = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"FETTER")]
        FETTER = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"KUSINE")]
        KUSINE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"STATEN")]
        STATEN = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"AVDOEDE")]
        AVDOEDE = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"FORDRINGSHAVER")]
        FORDRINGSHAVER = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"AVDOEDE_EKTEFELLE_PARTNER")]
        AVDOEDE_EKTEFELLE_PARTNER = 26,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum PartFormuesfullmakt
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INGEN")]
        INGEN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ALTINN_DODSBO")]
        ALTINN_DODSBO = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SakEmbeteId
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TAGD")]
        TAGD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TBUS")]
        TBUS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TFNO")]
        TFNO = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"THEL")]
        THEL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"THOD")]
        THOD = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"THOS")]
        THOS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TIOF")]
        TIOF = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TMHA")]
        TMHA = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"TMOR")]
        TMOR = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"TNTS")]
        TNTS = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"TOIN")]
        TOIN = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"TOSL")]
        TOSL = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"TRAB")]
        TRAB = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"TROG")]
        TROG = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"TSOF")]
        TSOF = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"TSOL")]
        TSOL = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"TSOS")]
        TSOS = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"TSRO")]
        TSRO = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"TTEL")]
        TTEL = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TTRO")]
        TTRO = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"TVES")]
        TVES = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"TVFI")]
        TVFI = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"TVIN")]
        TVIN = 22,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SakSkifteform
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IKKE_AVGJORT")]
        IKKE_AVGJORT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OFFENTLIG_SKIFTE")]
        OFFENTLIG_SKIFTE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"USKIFTE")]
        USKIFTE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PRIVAT_SKIFTE")]
        PRIVAT_SKIFTE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PRIVAT_SKIFTE_AV_DODSBO_MED_LITEN_VERDI")]
        PRIVAT_SKIFTE_AV_DODSBO_MED_LITEN_VERDI = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    internal class DateFormatConverter : System.Text.Json.Serialization.JsonConverter<System.DateTimeOffset>
    {
        public override System.DateTimeOffset Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
        {
            var dateTime = reader.GetString();
            if (dateTime == null)
            {
                throw new System.Text.Json.JsonException("Unexpected JsonTokenType.Null");
            }

            return System.DateTimeOffset.Parse(dateTime);
        }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, System.DateTimeOffset value, System.Text.Json.JsonSerializerOptions options)
        {
            writer.WriteStringValue(value.ToString("yyyy-MM-dd"));
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DaHendelserApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public DaHendelserApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DaHendelserApiException<TResult> : DaHendelserApiException
    {
        public TResult Result { get; private set; }

        public DaHendelserApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603